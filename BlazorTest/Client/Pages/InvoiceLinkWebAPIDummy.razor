@page "/Invoices/{Id:int}"
@inject HttpClient HttpClient
@inject BlazorTest.Client.Services.InvoiceServicesWebAPIDummy Services
@using BlazorTest.Client.Models;

<h3>請求書（WebAPI経由、ダミーデータ、一覧画面から遷移）</h3>

@if (InvoiceDetail != null)//InvoiceDetailはnullを許容しているのでnullチェックを行う
{
    <div>
        <h4>請求書番号 @InvoiceDetail.InvoiceNumber</h4>
        <p>顧客名: @InvoiceDetail.CustomerName</p>
        <p>作成日付: @InvoiceDetail.InvoiceDate.ToShortDateString()</p>
        <table class="table">
            <thead>
                <tr>
                    <th>商品</th>
                    <th>単価</th>
                    <th>数量</th>
                    <th>合計金額</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var item in InvoiceDetail.Items)
                {
                    <tr>
                        @if(editItem != null && editItem.Id == item.Id)
                        {
                            <td><input @bind="editItem.Description"/></td>
                            <td><input type="number" step="0.01" @bind="editItem.UnitPrice"/></td>
                            <td><input type="number" @bind="editItem.Quantity" /></td>
                            <td>@editItem.Amount</td>
                            <td>
                                <buttom class="btn btn-success" @onclick="SaveEdit">保存</buttom>
                                <button class="btn btn-secondary" @onclick="CancelEdit">キャンセル</button>
                            </td>
                        }
                        else
                        {

                            <td>@item.Description</td>
                            <td>@item.UnitPrice</td>
                            <td>@item.Quantity</td>
                            <td>@item.Amount</td>
                            <td>
                                <buttom class="btn btn-success" @onclick="() => EditItem(item)">編集</buttom>
                                <buttom class="btn btn-danger" @onclick="() => DeleteItem(item.Id)">削除</buttom>
                            </td>

                        }
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="AddNewItem">明細を追加</button>
    </div>
}
else if (IsLoading)
{
    <p>Loading</p>
}
else
{
    <p>Invoice not found...</p>
}

@code{
    [Parameter]
    public int Id { get; set; }
    private InvoiceModel? InvoiceDetail;//nullを許容するオブジェクト参照型に変更
    private bool IsLoading = true;
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // Web APIにリクエストを送り、指定IDの請求書データを取得
            InvoiceDetail = await HttpClient.GetFromJsonAsync<InvoiceModel>($"api/invoices/{Id}");
        }
        catch (HttpRequestException)
        {
            InvoiceDetail = null; // データが見つからない場合のエラーハンドリング
        }
        finally
        {
            IsLoading = false;
        }
    }

    //削除
    private void DeleteItem(int id)
    {
        if(InvoiceDetail?.Items != null)
        {
            var itemToRemove = InvoiceDetail.Items.FirstOrDefault(i => i.Id == id);
            if(itemToRemove != null)
            {
                InvoiceDetail.Items.Remove(itemToRemove);
            }
        }

    }

    //編集
    private InvoiceItem? editItem;
    private void EditItem(InvoiceItem invoiceItem)
    {
        //選択した項目をコピーして編集用に設定する
        editItem = new InvoiceItem
            {
                Id = invoiceItem.Id,
                Description = invoiceItem.Description,
                UnitPrice = invoiceItem.UnitPrice,
                Quantity = invoiceItem.Quantity
            };
    }
    private void SaveEdit()
    {
        //編集内容をもとのリストに適用する
        var invoiceSaveItem = InvoiceDetail?.Items.FirstOrDefault(i => i.Id == editItem?.Id);
        if(invoiceSaveItem != null && editItem != null)
        {
            invoiceSaveItem.Description = editItem.Description;
            invoiceSaveItem.UnitPrice = editItem.UnitPrice;
            invoiceSaveItem.Quantity = editItem.Quantity;
        }
        editItem = null;
    }
    private void CancelEdit()
    {
        editItem = null;
    }

    //明細追加
    private void AddNewItem()
    {
        if(InvoiceDetail == null)
        {
            InvoiceDetail = new InvoiceModel();
        }
        var newItem = new InvoiceItem
        {
            Id = InvoiceDetail.Items.Count + 1
        };
        InvoiceDetail.Items.Add(newItem);
    }
}
